{"version":3,"file":"static/js/ReviewView.2b2b8d9e.chunk.js","mappings":"oHAMA,IAJiB,WACf,OAAO,oCACR,C,+GCwBD,EAzBgB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACjB,OACE,8BACE,wBACGA,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EADE,OASpB,E,oBCMD,EAhBmB,WACjB,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,GAAY,EAGhB,OAFAC,EAAAA,EAAAA,IAAeN,GAASO,MAAK,SAAAC,GAAI,OAAKH,GAAaF,EAAWK,EAA7B,IAE1B,WACLH,GAAY,CACb,CACF,GAAE,CAACL,KAEG,8BAAGL,EAAQc,OAAS,GAAI,SAAC,EAAD,CAASd,QAASA,KAAc,SAACe,EAAA,EAAD,KAChE,C","sources":["Components/MoreInfo/NotFound/NotFound.js","Components/MoreInfo/Reviews/Reviews.js","views/movieDetails/ReviewView.js"],"sourcesContent":["import React from 'react';\n\nconst NotFound = () => {\n  return <p>Not found</p>;\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nconst Reviews = ({ reviews }) => {\n  return (\n    <section>\n      <ul>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <h3>Author: {author}</h3>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default Reviews;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Reviews from '../../Components/MoreInfo/Reviews';\nimport { getReviewsInfo } from '../../api/api';\nimport NotFound from '../../Components/MoreInfo/NotFound/NotFound';\n\nconst ReviewView = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    let cancelled = false;\n    getReviewsInfo(movieId).then(data => !cancelled && setReviews(data));\n\n    return () => {\n      cancelled = true;\n    };\n  }, [movieId]);\n\n  return <>{reviews.length > 0 ? <Reviews reviews={reviews} /> : <NotFound />}</>;\n};\n\nexport default ReviewView;\n"],"names":["reviews","map","id","author","content","movieId","useParams","useState","setReviews","useEffect","cancelled","getReviewsInfo","then","data","length","NotFound"],"sourceRoot":""}